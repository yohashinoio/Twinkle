配列の添え字を使った代入（a[0] = 4810みたいな）を最適化したい（要素数が10000以上くらいになるとLLVMの最適化が終わらなかったりするし、実行速度もクソ遅い）（gep前の不要なloadを消せればいい）
参照変数は初期化時だけ参照型を受け付け、代入では参照先の型だけを受け入れることを説明
コンストラクタでメンバの初期化
構造体のメンバアクセスや、typedefの符号に関してのテストを追加
未定義のユーザー定義型が変数型に指定されてもエラーにならずunreachableになるバグ
characterのようなchar（その他のプリミティブ型）の後に文字列を付け加えた識別子が許可されないバグ
privateなメンバ変数に(*this).xみたいな形でアクセスできないバグを修正
thisポインタを挿入する関数で、可変長引数だけの引数が許可され、かつエラーが表示なしで落ちるバグ
戻り値型がvoidの関数の戻り値を変数に代入してもエラーが出ないバグを修正する
メンバ変数のアクセス指定子の、わざと失敗するテスト
メソッドのアクセス指定子の、わざと失敗するテスト
sphinxでドキュメントを書く
ポインタへのポインタ
継承
仮想関数
浮動小数点数のインクリメント、デクリメント
全ての符号情報をSignKindで扱うように（boolになってるところがある）
属性（nomangleなど）の説明
わざと失敗するテストを作れるようにする
constなポインタをmutableなポインタに代入（もしくは引数として渡す）のを禁止したい
関数を自動的に前方宣言（Rustみたいな）
文字列をunicode対応に（文字列リテラルを*i8にするか*charにするか悩みどころ）
b'A'みたいなやつ（charじゃなくてi8になる）
コードポイントリテラル
演算子オーバーロード
名前空間
ドライバ内でリンカを呼び出す（ドライバ内でオプションをパースし、Contextのような構造体に結果を格納）
import exportのような機能
-oオプション
