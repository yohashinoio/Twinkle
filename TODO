s.p^のような式がエラーになる
mutableかどうかをValueで保持するのではなく型で保持するようにする（ポインタの指す先が変更可能か判断しやすくなる）
コメントを増やす
テンプレート関数のオーバーロードが出来ないバグ
テンプレート関数（宣言も）
テンプレート関数のインポート
グローバル定数
存在しない属性が指定された場合エラーに
演算後の結果もallocaで作った変数に格納するように（演算結果も参照可能にしたい）
定数はconst参照にだけしか渡せないように
void*を使用不可にする（i8*で代用する）
nullptr（i8*型で）
大なり、小なり、大なりイコール、小なりイコールなどの比較演算のテストを、もっとギリギリの値でやるようにしよう
エラーが起きた時点での、LLVM IRを出力するオプションを追加したい
配列のnew delete
sizeofを型名対応に（今は変数や定数にしか対応していない）
様々な区切り文字（punct）が識別子に使用可能になっているバグ
小数点数+整数のエラーを分かりやすくしよう(4.8 + 10みたいな) 暗黙的なキャストしてもいいかもしれない
配列の添え字を使った代入（a[0] = 4810みたいな）を最適化したい（要素数が10000以上くらいになるとLLVMの最適化が終わらなかったりするし、実行速度もクソ遅い）（gep前の不要なloadを消せればいい）
参照変数は初期化時だけ参照型を受け付け、代入では参照先の型だけを受け入れることをドキュメントに記述
コンストラクタでメンバの初期化
構造体のメンバアクセスや、typedefの符号に関してのテストを追加
characterのような識別子が許可されないバグ（プリミティブ型の後に文字列を付け加えた識別子）
privateなメンバ変数にをthis^.xのようにアクセスできないバグを修正
thisポインタを挿入する関数で、可変長引数だけの引数が許可され、かつエラー表示なしで落ちるバグ
戻り値型がvoidの関数の戻り値を変数に代入してもエラーが出ないバグを修正する
Sphinxを使ってドキュメントを書く
継承
仮想関数
浮動小数点数のインクリメント、デクリメント
全ての符号情報をSignKindで扱うように（boolになってるところがある）
属性（nomangleなど）の説明
わざと失敗するテストを作れるようにする
constなポインタをmutableなポインタに代入（もしくは引数として渡す）のを禁止したい
関数を自動的に前方宣言（Rustみたいな）
文字列をunicode対応に（文字列リテラルを*i8にするか*charにするか悩みどころ）
b'A'みたいなやつ（charじゃなくてi8になる）
コードポイントリテラル
演算子オーバーロード
名前空間
import exportのような機能
-oオプション
