A::B(x)みたいなunionのmatch caseもast::FunctionCallで処理しているのを修正（ast::FunctionCallを適切な名前にusingするだけでいい）
usize型などのインクリメント・デクリメントに対応する
s.p^のような式がエラーになる
テンプレート関数のオーバーロードが出来ないバグ
テンプレート関数（宣言も）
テンプレート関数のインポート
グローバル定数
存在しない属性が指定された場合エラーに
演算後の結果もallocaで作った変数に格納するように（右辺値も参照可能にしたい）
定数はconst参照にだけしか渡せないように
void*を使用不可に（i8*で代用する）
nullptr（i8*型を使って実装するっぽい？）
大なり、小なり、大なりイコール、小なりイコールなどの比較演算のテストをもっとギリギリの値で
エラーが起きた時点での、LLVM IRを出力するオプションを追加
sizeofを型名対応に（今は変数や定数にしか対応していない）
配列の添え字を使った代入（a[0] = 4810みたいな）を最適化したい（要素数が10000以上くらいになるとLLVMの最適化が終わらなかったりするし、実行速度もクソ遅い）（gep前の不要なloadを消せればいい）
privateなメンバ変数にをthis^.xのようにアクセスできないバグ
thisポインタが挿入される関数で、可変長引数だけの引数が許可され、かつエラー表示なしで落ちるバグ
戻り値型がvoidの関数の戻り値を変数に代入してもエラーが出ないバグ
Sphinxを使ってドキュメントを書く
継承
仮想関数
浮動小数点数のインクリメント、デクリメント
わざと失敗するテストを作れるようにする
constなポインタをmutableなポインタに代入（もしくは引数として渡す）のを禁止する
関数を自動的に前方宣言（Rustみたいな）
文字列をunicode対応に（文字列リテラルを*i8にするか*charにするか悩みどころ）
b'A'のような（charじゃなくてi8になる）
コードポイントリテラル
演算子オーバーロード
名前空間
import exportが未対応な機能の対応
-oオプション
