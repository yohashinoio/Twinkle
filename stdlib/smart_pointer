[[nomangle]]
declare func malloc(size: usize) -> ^i8;

[[nomangle]]
declare func free(p: ^i8);

pub class SharedP<T> {
  SharedP(value: &T)
    : p{malloc(sizeof value) as ^T}
    , count{malloc(sizeof i32) as ^i32}
  {
    p^ = value;
    count^ = 1;
  }

  SharedP(other: &SharedP<T>)
    : p{other.p}
    , count{other.count}
  {
    increment_count();
  }

  ~SharedP()
  {
    release();
  }

  func use_count() -> i32
  {
    return count^;
  }

  func release()
  {
    decrement_count();

    if (count^ == 0) {
      free(p);
      free(count);
    }
  }

  func value() -> T
  {
    return p^;
  }

  func set(value: T)
  {
    p^ = value;
  }

  func get() -> ^T
  {
    return p;
  }

private:
  func decrement_count()
  {
    --count^;
  }

  func increment_count()
  {
    ++count^;
  }

  let mut p: ^T;
  let mut count: ^i32;
}
